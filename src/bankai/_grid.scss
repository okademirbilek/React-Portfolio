@use "sass:math";
@use "breakpoints" as *;
@use "variables" as *;

$grid-colums: 12;

$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

//layout values
$layout-values: flex-start, flex-end, center, space-between, space-around;

//base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}

.row {
  display: flex;
  flex-flow: row wrap;
}

//grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

//justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}
//align items classes
@each $val in $layout-values {
  .align-#{$val} {
    align-items: $val;
  }
}

@mixin layout1($i, $grid-colums) {
  box-sizing: border-box;
  flex-grow: 0;
  width: math.div($i * 100%, $grid-colums);
}

//col classes

@include xs {
  @for $i from 1 through $grid-colums {
    .col-#{$i}-xs {
      @include layout1($i, $grid-colums);
    }
  }
}
@include sm {
  @for $i from 1 through $grid-colums {
    .col-#{$i}-sm {
      @include layout1($i, $grid-colums);
    }
  }
}
@include md {
  @for $i from 1 through $grid-colums {
    .col-#{$i}-md {
      @include layout1($i, $grid-colums);
    }
  }
}
@include lg {
  @for $i from 1 through $grid-colums {
    .col-#{$i}-lg {
      @include layout1($i, $grid-colums);
    }
  }
}
@include xl {
  @for $i from 1 through $grid-colums {
    .col-#{$i}-xl {
      @include layout1($i, $grid-colums);
    }
  }
}
